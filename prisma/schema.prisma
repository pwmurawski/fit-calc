datasource db {
  provider = "postgresql"
  // url = env("DATABASE_URL")
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  name         String
  surname      String?
  email        String        @unique
  password     String
  userType     String?       @default("STANDARD")

  foodProducts  FoodProduct[]
  blockedUser  BlockedUser?
}

model BlockedUser {
  id            String        @id @default(cuid())
  blocked       Boolean       @default(true)
  dateTime      DateTime      @default(now())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
}

model Meal {
  id           String        @id @default(cuid())
  name         String

  selectedProducts  SelectedProduct[]
}

model FoodProduct {
  id                  String                @id @default(cuid())
  userId              String?
  user                User?                  @relation(fields: [userId], references: [id])
  name                String
  kcal                Float
  protein             Float
  fat                 Float
  carbs               Float
  code                String?
  verifiedFoodProduct VerifiedFoodProduct?  
  blockedFoodProduct  BlockedFoodProduct?
}

model UserFoodProductCount {
  id            String        @id @default(cuid())
  userId        String
  foodProductId String
  count         Int
}

model VerifiedFoodProduct {
  id            String        @id @default(cuid())
  verified      Boolean       @default(true)
  dateTime      DateTime      @default(now())
  foodProductId String        @unique
  foodProduct   FoodProduct   @relation(fields: [foodProductId], references: [id])
}

model BlockedFoodProduct {
  id            String        @id @default(cuid())
  blocked       Boolean       @default(true)
  dateTime      DateTime      @default(now())
  foodProductId String        @unique
  foodProduct   FoodProduct   @relation(fields: [foodProductId], references: [id])
}

model SelectedProduct {
  id            String        @id @default(cuid())
  userId        String
  mealId        String
  meal          Meal          @relation(fields: [mealId], references: [id])
  foodProductId String
  weight        Float
  name          String
  kcal          Float
  protein       Float
  fat           Float
  carbs         Float
  code          String?
  dateTime      DateTime      @default(now())
}

model DailyGoals {
  id           String        @id @default(cuid())
  userId       String
  kcal         Float
  protein      Float
  fat          Float
  carbs        Float
  dateTime     DateTime      @default(now())
}

model PdfData {
  id        String   @id
  action    String
  data      Json
  generated Boolean
  expires   DateTime
}

model LoginLog {
  id        String   @id @default(cuid())
  email     String
  log       String?
  dateTime  DateTime      @default(now())
}